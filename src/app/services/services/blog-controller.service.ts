/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ApiResponseBlogResponse } from '../models/api-response-blog-response';
import { ApiResponsePageResponseBlogResponse } from '../models/api-response-page-response-blog-response';
import { getAllBlogs } from '../fn/blog-controller/get-all-blogs';
import { GetAllBlogs$Params } from '../fn/blog-controller/get-all-blogs';
import { getById } from '../fn/blog-controller/get-by-id';
import { GetById$Params } from '../fn/blog-controller/get-by-id';

@Injectable({ providedIn: 'root' })
export class BlogControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllBlogs()` */
  static readonly GetAllBlogsPath = '/blogs';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllBlogs()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBlogs$Response(params?: GetAllBlogs$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponsePageResponseBlogResponse>> {
    return getAllBlogs(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllBlogs$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBlogs(params?: GetAllBlogs$Params, context?: HttpContext): Observable<ApiResponsePageResponseBlogResponse> {
    return this.getAllBlogs$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponsePageResponseBlogResponse>): ApiResponsePageResponseBlogResponse => r.body)
    );
  }

  /** Path part for operation `getById()` */
  static readonly GetByIdPath = '/blogs/{blog-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getById$Response(params: GetById$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseBlogResponse>> {
    return getById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getById(params: GetById$Params, context?: HttpContext): Observable<ApiResponseBlogResponse> {
    return this.getById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseBlogResponse>): ApiResponseBlogResponse => r.body)
    );
  }

}
