/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ApiResponseBlogResponse } from '../models/api-response-blog-response';
import { createBlog } from '../fn/admin-controller/create-blog';
import { CreateBlog$Params } from '../fn/admin-controller/create-blog';
import { deleteBlog } from '../fn/admin-controller/delete-blog';
import { DeleteBlog$Params } from '../fn/admin-controller/delete-blog';
import { sendNotificationMessage } from '../fn/admin-controller/send-notification-message';
import { SendNotificationMessage$Params } from '../fn/admin-controller/send-notification-message';
import { updateBlog } from '../fn/admin-controller/update-blog';
import { UpdateBlog$Params } from '../fn/admin-controller/update-blog';
import { uploadCarCoverPicture } from '../fn/admin-controller/upload-car-cover-picture';
import { UploadCarCoverPicture$Params } from '../fn/admin-controller/upload-car-cover-picture';

@Injectable({ providedIn: 'root' })
export class AdminControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateBlog()` */
  static readonly UpdateBlogPath = '/admin/blogs/{blog-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateBlog()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBlog$Response(params: UpdateBlog$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseBlogResponse>> {
    return updateBlog(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateBlog$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBlog(params: UpdateBlog$Params, context?: HttpContext): Observable<ApiResponseBlogResponse> {
    return this.updateBlog$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseBlogResponse>): ApiResponseBlogResponse => r.body)
    );
  }

  /** Path part for operation `deleteBlog()` */
  static readonly DeleteBlogPath = '/admin/blogs/{blog-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteBlog()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteBlog$Response(params: DeleteBlog$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteBlog(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteBlog$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteBlog(params: DeleteBlog$Params, context?: HttpContext): Observable<void> {
    return this.deleteBlog$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `sendNotificationMessage()` */
  static readonly SendNotificationMessagePath = '/admin/send/notification';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `sendNotificationMessage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendNotificationMessage$Response(params: SendNotificationMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return sendNotificationMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `sendNotificationMessage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendNotificationMessage(params: SendNotificationMessage$Params, context?: HttpContext): Observable<{
}> {
    return this.sendNotificationMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `createBlog()` */
  static readonly CreateBlogPath = '/admin/blogs';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createBlog()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createBlog$Response(params: CreateBlog$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseBlogResponse>> {
    return createBlog(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createBlog$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createBlog(params: CreateBlog$Params, context?: HttpContext): Observable<ApiResponseBlogResponse> {
    return this.createBlog$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseBlogResponse>): ApiResponseBlogResponse => r.body)
    );
  }

  /** Path part for operation `uploadCarCoverPicture()` */
  static readonly UploadCarCoverPicturePath = '/admin/blogs/cover/{blog-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadCarCoverPicture()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadCarCoverPicture$Response(params: UploadCarCoverPicture$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return uploadCarCoverPicture(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadCarCoverPicture$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadCarCoverPicture(params: UploadCarCoverPicture$Params, context?: HttpContext): Observable<void> {
    return this.uploadCarCoverPicture$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
