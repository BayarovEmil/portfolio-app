/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { sendNotification } from '../fn/subscription-controller/send-notification';
import { SendNotification$Params } from '../fn/subscription-controller/send-notification';
import { subscribe } from '../fn/subscription-controller/subscribe';
import { Subscribe$Params } from '../fn/subscription-controller/subscribe';
import { subscribeV2 } from '../fn/subscription-controller/subscribe-v-2';
import { SubscribeV2$Params } from '../fn/subscription-controller/subscribe-v-2';

@Injectable({ providedIn: 'root' })
export class SubscriptionControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `subscribeV2()` */
  static readonly SubscribeV2Path = '/user/subscribe/v2';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `subscribeV2()` instead.
   *
   * This method doesn't expect any request body.
   */
  subscribeV2$Response(params: SubscribeV2$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return subscribeV2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `subscribeV2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  subscribeV2(params: SubscribeV2$Params, context?: HttpContext): Observable<{
}> {
    return this.subscribeV2$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `sendNotification()` */
  static readonly SendNotificationPath = '/user/subscribe/notification';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `sendNotification()` instead.
   *
   * This method doesn't expect any request body.
   */
  sendNotification$Response(params: SendNotification$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return sendNotification(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `sendNotification$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  sendNotification(params: SendNotification$Params, context?: HttpContext): Observable<{
}> {
    return this.sendNotification$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `subscribe()` */
  static readonly SubscribePath = '/user/subscribe/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `subscribe()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  subscribe$Response(params: Subscribe$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return subscribe(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `subscribe$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  subscribe(params: Subscribe$Params, context?: HttpContext): Observable<{
}> {
    return this.subscribe$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
